#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import re
import subprocess
import time
from datetime import timedelta

import psutil
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
PEER_NAMES = {
    "10.66.66.2": "Client1",
    "10.66.66.3": "Client2",
    "10.66.66.4": "Client3",
# etc.
}

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
CPU_THRESHOLD = 80.0  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
MEM_THRESHOLD = 80.0  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
NET_THRESHOLD_MBPS = 500.0 # –≤ –º–µ–≥–∞–±–∏—Ç–∞—Ö/—Å–µ–∫ (—Å—É–º–º–∞—Ä–Ω–æ upload + download)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CHECK_INTERVAL_SECONDS = 60

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø ---
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
alert_states = {
    "cpu": False,
    "mem": False,
    "net": False,
}
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
net_io_history = {
    "last_check_time": time.time(),
    "last_bytes_sent": 0,
    "last_bytes_recv": 0,
}

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_system_metrics():
    """–°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ CPU, RAM –∏ —Å–µ—Ç–∏."""
    cpu_usage = psutil.cpu_percent(interval=1)
    mem_info = psutil.virtual_memory()
    mem_usage = mem_info.percent
    
    # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
    global net_io_history
    current_time = time.time()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if net_io_history["last_bytes_sent"] == 0:
        net_counters = psutil.net_io_counters()
        net_io_history["last_bytes_sent"] = net_counters.bytes_sent
        net_io_history["last_bytes_recv"] = net_counters.bytes_recv
        net_io_history["last_check_time"] = current_time
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ 0
        net_upload_mbps, net_download_mbps = 0.0, 0.0
    else:
        time_delta = current_time - net_io_history["last_check_time"]
        current_net_counters = psutil.net_io_counters()
        
        bytes_sent_delta = current_net_counters.bytes_sent - net_io_history["last_bytes_sent"]
        bytes_recv_delta = current_net_counters.bytes_recv - net_io_history["last_bytes_recv"]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ú–±–∏—Ç/—Å
        net_upload_mbps = (bytes_sent_delta * 8) / (time_delta * 1_000_000) if time_delta > 0 else 0
        net_download_mbps = (bytes_recv_delta * 8) / (time_delta * 1_000_000) if time_delta > 0 else 0
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        net_io_history["last_check_time"] = current_time
        net_io_history["last_bytes_sent"] = current_net_counters.bytes_sent
        net_io_history["last_bytes_recv"] = current_net_counters.bytes_recv

    return {
        "cpu": cpu_usage,
        "mem": mem_usage,
        "upload_mbps": net_upload_mbps,
        "download_mbps": net_download_mbps,
        "total_mbps": net_upload_mbps + net_download_mbps,
    }

def get_wg_peers():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É 'wg show' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ –≤—ã–≤–æ–¥.
    –í–ê–ñ–ù–û: –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (sudo).
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sudo, —Ç–∞–∫ –∫–∞–∫ wg show —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤
        result = subprocess.run(
            ["sudo", "wg", "show"],
            capture_output=True,
            text=True,
            check=True,
            timeout=10
        )
        return result.stdout.strip()
    except FileNotFoundError:
        return "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'wg' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Wireguard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'wg show': {e.stderr}")
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã 'wg show'.\n–í–æ–∑–º–æ–∂–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ sudo?\n\n{e.stderr}"
    except subprocess.TimeoutExpired:
        return "–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'wg show' –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ."
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ 'wg show': {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

async def send_telegram_message(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        await context.bot.send_message(
            chat_id=CHAT_ID, text=message, parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ Wireguard.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/monitoring - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã.\n"
        "/active_wg - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ Wireguard."
    )

async def monitoring_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
    metrics = get_system_metrics()
    uptime_seconds = time.time() - psutil.boot_time()
    uptime_string = str(timedelta(seconds=int(uptime_seconds)))
    
    message = (
        "<b>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üñ•Ô∏è <b>CPU:</b> {metrics['cpu']:.2f} %\n"
        f"üß† <b>Memory:</b> {metrics['mem']:.2f} %\n"
        f"üîº <b>Upload:</b> {metrics['upload_mbps']:.2f} –ú–±–∏—Ç/—Å\n"
        f"üîΩ <b>Download:</b> {metrics['download_mbps']:.2f} –ú–±–∏—Ç/—Å\n\n"
        f"‚è±Ô∏è <b>Uptime:</b> {uptime_string}"
    )
    await update.message.reply_html(message)

async def active_wg_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏—Ä–æ–≤ Wireguard —Å –∏–º–µ–Ω–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    peers_info_raw = get_wg_peers()
    
    peers_info_processed = peers_info_raw

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–≤–æ–¥
    if "–û—à–∏–±–∫–∞" not in peers_info_raw and peers_info_raw:
        processed_lines = []
        for line in peers_info_raw.splitlines():
            # –ò—â–µ–º IP-–∞–¥—Ä–µ—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            found_ips = re.findall(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', line)
            
            name_to_add = ""
            for ip in found_ips:
                if ip in PEER_NAMES:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ IP –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è
                    name_to_add = f"  <b>({PEER_NAMES[ip]})</b>"
                    break # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ
            processed_lines.append(line + name_to_add)
            
        peers_info_processed = "\n".join(processed_lines)
    elif not peers_info_raw:
        peers_info_processed = "–ü–∏—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω."
    
    message = f"<b>üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∏—Ä—ã Wireguard:</b>\n\n<pre>{peers_info_processed}</pre>"
    await update.message.reply_html(message)

# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –î–õ–Ø –ê–õ–ï–†–¢–û–í ---

async def check_alerts(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤."""
    global alert_states
    metrics = get_system_metrics()
    
    alerts_to_send = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
    if metrics["cpu"] > CPU_THRESHOLD and not alert_states["cpu"]:
        alerts_to_send.append(f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU!</b>\n   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metrics['cpu']:.2f}% (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)")
        alert_states["cpu"] = True
    elif metrics["cpu"] < CPU_THRESHOLD and alert_states["cpu"]:
        alerts_to_send.append(f"‚úÖ <b>–ù–æ—Ä–º–∞: –ó–∞–≥—Ä—É–∑–∫–∞ CPU —Å–Ω–∏–∑–∏–ª–∞—Å—å.</b>\n   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metrics['cpu']:.2f}%")
        alert_states["cpu"] = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Memory
    if metrics["mem"] > MEM_THRESHOLD and not alert_states["mem"]:
        alerts_to_send.append(f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!</b>\n   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metrics['mem']:.2f}% (–ü–æ—Ä–æ–≥: {MEM_THRESHOLD}%)")
        alert_states["mem"] = True
    elif metrics["mem"] < MEM_THRESHOLD and alert_states["mem"]:
        alerts_to_send.append(f"‚úÖ <b>–ù–æ—Ä–º–∞: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–Ω–∏–∑–∏–ª–æ—Å—å.</b>\n   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {metrics['mem']:.2f}%")
        alert_states["mem"] = False
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Network
    total_net = metrics["total_mbps"]
    if total_net > NET_THRESHOLD_MBPS and not alert_states["net"]:
        alerts_to_send.append(f"üö® <b>–í–Ω–∏–º–∞–Ω–∏–µ: –í—ã—Å–æ–∫–∞—è —Å–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!</b>\n   –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_net:.2f} –ú–±–∏—Ç/—Å (–ü–æ—Ä–æ–≥: {NET_THRESHOLD_MBPS} –ú–±–∏—Ç/—Å)")
        alert_states["net"] = True
    elif total_net < NET_THRESHOLD_MBPS and alert_states["net"]:
        alerts_to_send.append(f"‚úÖ <b>–ù–æ—Ä–º–∞: –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∑–∏–ª–∞—Å—å.</b>\n   –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_net:.2f} –ú–±–∏—Ç/—Å")
        alert_states["net"] = False

    if alerts_to_send:
        message = "\n\n".join(alerts_to_send)
        await send_telegram_message(context, message)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not BOT_TOKEN or CHAT_ID:
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ BOT_TOKEN –∏ CHAT_ID –≤ .env")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("monitoring", monitoring_command))
    application.add_handler(CommandHandler("active_wg", active_wg_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    job_queue = application.job_queue
    job_queue.run_repeating(check_alerts, interval=CHECK_INTERVAL_SECONDS, first=10)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
